var querystring = require('querystring');
var https = require('https');
var http = require('http');
var url = require('url');

function request(options, data) {
    return new Promise(function buildPromise(resolve, reject) {
        if (typeof options == 'string') {
            options = {
                url: options,
                method: 'GET'
            };
        }

        if (typeof options.url == 'string') {
            options = Object.assign(options, url.parse(options.url, true, false));
        }

        if (options.method == 'GET') {
            options.query = Object.assign({}, options.query, data);
            options.search = '?' + querystring.stringify(options.query);
            options.path = options.pathname + options.search;
        }

        var createRequest = /https/.test(options.protocol) ? https.request : http.request;
        var req = createRequest(options, function onResponse(res) {
            var buffers = [];
            req.setTimeout(options.timeout || 30000);
            res.on('data', function onData(c) {
                buffers.push(c);
            });
            res.on('end', function onEnd() {
                if (res.statusCode !== 200) {
                    return reject({
                        res: res,
                        req: req,
                        body: Buffer.concat(buffers),
                        statusCode: res.statusCode
                    });
                }
                res = undefined;
                req = undefined;
                data = undefined;
                resolve(Buffer.concat(buffers));
            });
            res.on('error', reject);
        }).on('error', reject);

        if (options.method == 'GET') {
            req.end();
        } else if (typeof data === 'object' && typeof data.pipe === 'function') {
            data.pipe(req);
        } else {
            req.end(data);
        }
    }).catch(function onError(error) {
        if ([302, 301].indexOf(error.statusCode) > -1 && error.res.headers.location) {
            var opts = Object.assign(options, url.parse(error.res.headers.location));
            return request(opts, data);
        }
        throw {
            error: {
                error_code: error.statusCode || -1,
                error_msg: 'I/O Error',
                options: options,
                error: error
            }
        };
    });
}

module.exports = request;
